# Bảng hệ thống quản lí nhân viên gồm các chức năng thêm, tìm, xóa, cập nhật , in ra tất cả thông tin của nhân viên gồm
# mã ID, Tên, Ngày sinh, Quê quán
import tkinter as tk
from tkinter import messagebox
#định nghĩa lớp employee để lưu trữ thông tin một nhân viên, init khởi tạo thuộc tính của nhân viên. 
#hàm Info để in thông tin của nhân viên ra màn hình

class Employee:
    def __init__(self, id, name, sex, dob, hometown):
        self.id = id
        self.name = name
        self.sex = sex
        self.dob = dob
        self.hometown = hometown
        

    def info(self):
        print(f"ID: {self.id}")
        print(f"Name: {self.name}")
        print(f"Sex: {self.sex}")
        print(f"Date of birth: {self.dob}")
        print(f"Hometown: {self.hometown}"
        
#tạo lớp (class) EmployeeList để quản lý danh sách nhân viên
class EmployeeList:
    def __init__(self):
        self.employees = []

    def add_employee(self, employee):
        self.employees.append(employee)

    def update_employee(self, id, name, sex, dob, hometown):
        for employee in self.employees:
            if employee.id == id:
                employee.name = name
                employee.sex = sex
                employee.dob = dob
                employee.hometown = hometown
                return True
        return False

    def delete_employee(self, id):
        for employee in self.employees:
            if employee.id == id:
                self.employees.remove(employee)
                return True
        return False

    def find_employee(self, id):
        for employee in self.employees:
            if employee.id == id:
                return employee
        return None

    def get_all_employees(self):
        return self.employees        
        
#Lớp Application này tạo ra một ứng dụng GUI sử dụng thư viện tkinter trong Python.
class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.master.title("QUẢN LÝ THÔNG TIN NHÂN VIÊN")
        self.create_widgets()
        self.employee_list = EmployeeList()
        self.id_list = []  # Tạo thuộc tính id_list để khi nhập thông tin sẽ không hiển thị Text 
    
        
    #thiểt lập màu nền bg và màu chữ fg cho các phần tử trong GUI
        self.master.configure(bg='lightblue')
        self.id_entry.configure(bg='white')
        self.id_entry.configure(fg='blue')
        self.name_entry.configure(bg='white')
        self.sex_entry.configure(bg='white')
        self.dob_entry.configure(bg='white')
        self.hometown_entry.configure(bg='white')
        self.result_text.configure(bg='white')
        self.result_text.configure(fg='blue')
        
        
#Phương thức create_widgets được sử dụng để tạo ra các thành phần giao diện người dùng, tạo ra một ô văn bản (Text) 
#để hiển thị kết quả
    def create_widgets(self):
        tk.Label(self.master, text="ID", bg='lightblue').grid(row=0, column=0)
        tk.Label(self.master, text="Name", bg='lightblue').grid(row=1, column=0)
        tk.Label(self.master, text="Sex", bg='lightblue').grid(row=2, column=0)
        tk.Label(self.master, text="Date of birth", bg='lightblue').grid(row=3, column=0)
        tk.Label(self.master, text="Hometown", bg='lightblue').grid(row=4, column=0)

        self.id_entry = tk.Entry(self.master)
        self.id_entry.grid(row=0, column=1)

        self.name_entry = tk.Entry(self.master)
        self.name_entry.grid(row=1, column=1)
        
        self.sex_entry = tk.Entry(self.master)
        self.sex_entry.grid(row=2, column=1)      

        self.dob_entry = tk.Entry(self.master)
        self.dob_entry.grid(row=3, column=1)

        self.hometown_entry = tk.Entry(self.master)
        self.hometown_entry.grid(row=4, column=1)
        
        # Thiết lập nút ấn gồm tên, màu nền, vị trí
        tk.Button(self.master, text="THÊM", command=self.add_employee, bg='lightblue').grid(row=5, column=0)
        tk.Button(self.master, text="CẬP NHẬT", command=self.update_employee, bg='lightblue').grid(row=5, column=1)
        tk.Button(self.master, text="XÓA", command=self.delete_employee, bg='red').grid(row=5, column=2)
        tk.Button(self.master, text="TÌM KIỂM", command=self.find_employee, bg='lightblue').grid(row=6, column=0)
        tk.Button(self.master, text="HIỂN THỊ TẤT CẢ", command=self.show_all_employees, bg='lightblue').grid(row=6, column=1)

        self.result_text = tk.Text(self.master, height=40, width=60)
        self.result_text.grid(row=7, column=0, columnspan=3)

    def add_employee(self):
        id = self.id_entry.get()
        
        if id not in self.id_list:
            self.id_list.append(id)
            name = self.name_entry.get()
            sex = self.sex_entry.get()
            dob = self.dob_entry.get()
            hometown = self.hometown_entry.get()
            employee = Employee(id, name, sex, dob, hometown)
            self.employee_list.add_employee(employee)
            self.result_text.delete('1.0', tk.END)  # Xóa tất cả dữ liệu trên Text widget
            self.result_text.insert(tk.END, f"Added employee with ID {id}\n")
            
            self.show_all_employees()  # Hiển thị lại thông tin nhân viên theo thứ tự tăng dần của ID
            
        else:
            self.result_text.insert(tk.END, f"Employee with ID {id} already exists\n")

        # Ẩn phần thông tin đang hiển thị trên Text widget
        self.result_text.tag_add("hide", "1.0", tk.END)
        self.result_text.tag_config("hide", foreground=self.result_text['background'])

    def update_employee(self):
        id = self.id_entry.get()
        name = self.name_entry.get()
        sex = self.sex_entry.get()
        dob = self.dob_entry.get()
        hometown = self.hometown_entry.get()
        if self.employee_list.update_employee(id, name, sex, dob, hometown):
            self.result_text.insert(tk.END, f"Updated employee with ID {id}\n")
        else:
            self.result_text.insert(tk.END, f"Employee with ID {id} not found\n")

    def delete_employee(self):
        id = self.id_entry.get()
        if self.employee_list.delete_employee(id):
            self.result_text.insert(tk.END, f"Deleted employee with ID {id}\n")
        else:
            self.result_text.insert(tk.END, f"Employee with ID {id} not found\n")

    def find_employee(self):
        id = self.id_entry.get()
        employee = self.employee_list.find_employee(id)
        if employee:
            self.result_text.insert(tk.END, f"Found employee with ID {id}\n")
            self.result_text.insert(tk.END, f"Name: {employee.name}\n")
            self.result_text.insert(tk.END, f"Sex: {employee.sex}\n")
            self.result_text.insert(tk.END, f"Date of birth: {employee.dob}\n")
            self.result_text.insert(tk.END, f"Hometown: {employee.hometown}\n")
        else:
            self.result_text.insert(tk.END, f"Employee with ID {id} not found\n")

    def show_all_employees(self):
        self.result_text.delete('1.0', tk.END)
        employees = self.employee_list.get_all_employees()
        if employees:
            employees = sorted(employees, key=lambda x: int(x.id))  # Sắp xếp danh sách nhân viên theo ID
            for i, employee in enumerate(employees):
                self.result_text.insert(tk.END, f"ID: {i+1}\n")  # Hiển thị ID theo thứ tự từ 1 đến n
                self.result_text.insert(tk.END, f"Name: {employee.name}\n")
                self.result_text.insert(tk.END, f"Sex: {employee.sex}\n")
                self.result_text.insert(tk.END, f"Date of birth: {employee.dob}\n")
                self.result_text.insert(tk.END, f"Hometown: {employee.hometown}\n\n")
        else:
            self.result_text.insert(tk.END, "No employees found\n")

        # Hiển thị lại tất cả các dữ liệu trên Text widget
        self.result_text.tag_delete("hide")
          
root = tk.Tk()
app = Application(master=root)
app.mainloop()      
